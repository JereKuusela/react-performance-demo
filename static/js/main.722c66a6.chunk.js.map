{"version":3,"sources":["app/utils.ts","components/Input.tsx","components/TrackingInput.tsx","app/selectors.ts","components/DataList.tsx","app/reducer.ts","components/NameInputs.tsx","pages/ExampleRendering.tsx","pages/ExampleSelectors.tsx","app/reselect.ts","components/FullName.tsx","pages/ExampleReselect.tsx","pages/ExampleValues.tsx","components/TrackingButton.tsx","pages/ExampleState.tsx","components/Adder.tsx","pages/ExampleHandlers.tsx","App.tsx","app/store.ts","index.tsx"],"names":["instanceIndex","instances","getInstanceNumber","name","counter","doExpensiveCalculation","instance","red","blue","yellow","getNextColor","previous","Input","value","onChange","style","useState","currentValue","setCurrentValue","useEffect","update","handleBlur","onKeyPress","key","event","target","onBlur","size","disabled","NumericInput","String","Number","type","TrackingInput","ref","useRef","current","backgroundColor","padding","marginRight","borderRadius","MemoizedTrackingInput","memo","getAllData","state","names","getData","getName","index","getFullName","first","last","useClicks","useSelector","clicks","useAllData","useData","useName","useFullName","useFullNameWithShallow","shallowEqual","DataList","header","Component","data","Divider","Header","List","map","item","initialState","Array","fill","stateClicks","addClicks","slice","createSlice","reducers","set","payload","setFirstName","setLastName","addStateClick","addClicksWithAdd","setAddClicks","unboxParameters","callback","args","actions","MemoizedNameInputs","children","useUpdate","handleFirstChange","handleLastChange","ListItem","NameInputs","dispatch","useDispatch","useCallback","component","WithMemoizedItem","MemoizedRenderFirstName","MemoizedRenderLastName","ExampleRendering","WithAllData","RenderFirstNameWithAllData","RenderLastNameWithAllData","WithData","RenderFirstNameWithData","RenderLastNameWithData","WithName","RenderFirstNameWithName","RenderLastNameWithName","WithAttribute","RenderFirstNameWithAttribute","RenderLastNameWithAttribute","useFirstName","useLastName","ExampleSelectors","getInstance","_state","path","getFirstNameWithProps","getLastNameWithProps","createFullNameCounterSelector","createSelector","fullNameCounterSelector","useFullNameWithReselect","selector","useMemo","FullNameString","MemoizedFullNameString","MemoizedFullNameObject","FullNameRedux","MemoizedFullNameRedux","FromRedux","useFullNameCounter","FromReselect","useFullNameCounterWithReselect","FromFixedReselect","useFullNameCounterWithFixedReselect","ExampleReselect","FromObject","FromObjectWithMemo","FromString","FromStringWithoutMemoization","FromReduxShallow","FromReduxShallowWithoutMemo","ExampleValues","TrackingButton","onClick","Button","border","width","height","circular","MemoizedTrackingButton","Counter","hook","handleClick","useWithState","setState","prev","useWithDispatch","useWithRedux","useWithRef","click","useWithMutableState","counterReducer","Error","useWithReducer","useReducer","ExampleState","AdderDispatch","React","createContext","AdderWithDispatch","totalClicks","Provider","AdderButtonWithDispatch","NumericInputWithDispatch","useContext","Adder","memoized","setClicks","ButtonComponent","useWithoutUsecallback","useWithUseCallback","useWithUpdater","clicksRef","useWithCallbackRef","callbackRef","adderReducer","action","add","reducerDispatch","useWithReducerNoProps","ExampleHandlers","Brrrrrrrrrrrrrr","App","panes","menuItem","render","Tab","Pane","Container","store","configureStore","reducer","devTools","trace","traceLimit","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.722c66a6.chunk.js","sourcesContent":["let instanceIndex = 0\r\nconst instances = {} as Record<string, number>\r\n\r\n/**\r\n * Instance numbering is used to give a separate state to each example.\r\n * Name is used to return same instance number even when an example remounts.\r\n */\r\nexport const getInstanceNumber = (name: string) => {\r\n  if (!instances[name]) instances[name] = instanceIndex++\r\n  return instances[name]\r\n}\r\n\r\nexport interface Item {\r\n  index: number\r\n  first: string\r\n  last: string\r\n}\r\n\r\nexport type ItemProps = {\r\n  item: Item\r\n  instance: number\r\n}\r\n\r\nconst counter = {} as Record<number, number>\r\n/**\r\n * Simulates expensive calculations by tracking amount of calls.\r\n * This number is shown on UI to demonstrate how wasteful default useSelectors are.\r\n */\r\nexport const doExpensiveCalculation = (instance: number) => {\r\n  if (!counter[instance]) counter[instance] = 0\r\n  return ++counter[instance]\r\n}\r\n\r\nexport const red = '#fc9d9d'\r\nexport const blue = '#827cf7'\r\nexport const yellow = '#e0de6e'\r\nexport const white = 'white'\r\n\r\nexport const getNextColor = (previous: string) => {\r\n  switch (previous) {\r\n    case white:\r\n      return red\r\n    case red:\r\n      return blue\r\n    case blue:\r\n      return yellow\r\n    case yellow:\r\n      return red\r\n    default:\r\n      return red\r\n  }\r\n}\r\n","import React, { CSSProperties, useEffect, useState } from 'react'\r\nimport { Input as SInput } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n  value: string\r\n  onChange?: (value: string) => void\r\n  style?: CSSProperties\r\n}\r\n\r\n/**\r\n * A wrapper for input to only update the value when pressing enter or when losing focus.\r\n */\r\nexport const Input = ({ value, onChange, style }: Props) => {\r\n  const [currentValue, setCurrentValue] = useState(value)\r\n\r\n  useEffect(() => {\r\n    setCurrentValue(value)\r\n  }, [value])\r\n\r\n  const update = () => {\r\n    if (currentValue !== value && onChange) onChange(currentValue)\r\n  }\r\n\r\n  const handleBlur = update\r\n\r\n  const handleKeyPress = ({ key }: { key: string }) => {\r\n    if (key === 'Enter') update()\r\n  }\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setCurrentValue(event.target.value)\r\n  }\r\n\r\n  return (\r\n    <SInput\r\n      value={currentValue}\r\n      onKeyPress={handleKeyPress}\r\n      onChange={handleChange}\r\n      onBlur={handleBlur}\r\n      style={style}\r\n      size='small'\r\n      disabled={!onChange}\r\n    />\r\n  )\r\n}\r\n\r\ninterface NumericProps {\r\n  value: number\r\n  onChange?: (value: number) => void\r\n  style?: CSSProperties\r\n}\r\n\r\n/**\r\n * A wrapper for input to only update the value when pressing enter or when losing focus.\r\n */\r\nexport const NumericInput = ({ value, onChange, style }: NumericProps) => {\r\n  const [currentValue, setCurrentValue] = useState(String(value))\r\n\r\n  useEffect(() => {\r\n    setCurrentValue(String(value))\r\n  }, [value])\r\n\r\n  const update = () => {\r\n    if (Number(currentValue) !== value && onChange) onChange(Number(currentValue))\r\n  }\r\n\r\n  const handleBlur = update\r\n\r\n  const handleKeyPress = ({ key }: { key: string }) => {\r\n    if (key === 'Enter') update()\r\n  }\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setCurrentValue(event.target.value)\r\n  }\r\n\r\n  return (\r\n    <SInput\r\n      value={currentValue}\r\n      onKeyPress={handleKeyPress}\r\n      onChange={handleChange}\r\n      onBlur={handleBlur}\r\n      style={style}\r\n      size='small'\r\n      disabled={!onChange}\r\n      type='number'\r\n    />\r\n  )\r\n}\r\n","import React, { useRef, useEffect, memo } from 'react'\r\nimport { getNextColor } from '../app/utils'\r\nimport { Input } from './Input'\r\n\r\n/**\r\n * A text input that tracks rendering with background color.\r\n */\r\nexport const TrackingInput = ({ value, onChange }: { value: string; onChange?: (value: string) => void }) => {\r\n  const ref = useRef('')\r\n  useEffect(() => {\r\n    ref.current = getNextColor(ref.current)\r\n  })\r\n  return (\r\n    <Input\r\n      value={value}\r\n      onChange={onChange}\r\n      style={{ backgroundColor: ref.current, padding: 5, marginRight: 5, borderRadius: 5 }}\r\n    />\r\n  )\r\n}\r\n\r\nexport const MemoizedTrackingInput = memo(TrackingInput)\r\n","// Selector hooks to return data from Redux.\r\nimport { useSelector, shallowEqual } from 'react-redux'\r\nimport { RootState } from './store'\r\n\r\nconst getAllData = (state: RootState) => state.names\r\nconst getData = (state: RootState, instance: number) => getAllData(state)[instance]\r\nconst getName = (state: RootState, instance: number, index: number) => getData(state, instance)[index]\r\nconst getFullName = (state: RootState, instance: number, index: number) => {\r\n  const { first, last } = getName(state, instance, index)\r\n  return { first, last }\r\n}\r\nexport const useClicks = (instance: number) => useSelector((state: RootState) => state.clicks[instance])\r\n\r\nexport const useAllData = () => useSelector(getAllData)\r\n\r\nexport const useData = (instance: number) => useSelector((state: RootState) => getData(state, instance))\r\n\r\nexport const useName = (instance: number, index: number) =>\r\n  useSelector((state: RootState) => getName(state, instance, index))\r\n\r\nexport const useFirstName = (instance: number, index: number) =>\r\n  useSelector((state: RootState) => getName(state, instance, index).first)\r\n\r\nexport const useLastName = (instance: number, index: number) =>\r\n  useSelector((state: RootState) => getName(state, instance, index).last)\r\n\r\nexport const useFullName = (instance: number, index: number) =>\r\n  useSelector((state: RootState) => getFullName(state, instance, index))\r\n\r\nexport const useFullNameWithShallow = (instance: number, index: number) =>\r\n  useSelector((state: RootState) => getFullName(state, instance, index), shallowEqual)\r\n","import React, { FC } from 'react'\r\nimport { Divider, Header, List } from 'semantic-ui-react'\r\nimport { getInstanceNumber, ItemProps } from '../app/utils'\r\nimport { useData } from '../app/selectors'\r\n\r\ninterface Props {\r\n  name: string\r\n  header: string\r\n  Component: FC<ItemProps>\r\n}\r\n\r\n/**\r\n * Renders items of an instance with a given component.\r\n * This is used by most of the examples.\r\n */\r\nconst DataList = ({ header, name, Component }: Props) => {\r\n  const instance = getInstanceNumber(name)\r\n  const data = useData(instance)\r\n  return (\r\n    <>\r\n      <Divider />\r\n      <Header size='small'>{header}</Header>\r\n      <List>\r\n        {data.map((item) => (\r\n          <Component item={item} key={item.index} instance={instance} />\r\n        ))}\r\n      </List>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DataList\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { Item } from './utils'\r\n\r\ninterface State {\r\n  names: Item[][]\r\n  clicks: number[]\r\n  stateClicks: number\r\n  addClicks: number\r\n}\r\n\r\nconst initialState: State = {\r\n  names: Array(50)\r\n    .fill(null)\r\n    .map(() => [\r\n      { index: 0, first: 'John', last: 'Doe' },\r\n      { index: 1, first: 'Jane', last: 'Doe' },\r\n      { index: 2, first: 'Jay', last: 'Doe' },\r\n    ]),\r\n  clicks: Array(50).fill(0),\r\n  stateClicks: 0,\r\n  addClicks: 0,\r\n}\r\n\r\nexport const slice = createSlice({\r\n  name: 'name',\r\n  initialState,\r\n  reducers: {\r\n    set: (state, { payload }: PayloadAction<[number, Item]>) => {\r\n      const [instance, item] = payload\r\n      state.names[instance][item.index] = item\r\n    },\r\n    setFirstName: (state, { payload }: PayloadAction<[number, number, string]>) => {\r\n      const [instance, index, name] = payload\r\n      state.names[instance][index].first = name\r\n    },\r\n    setLastName: (state, { payload }: PayloadAction<[number, number, string]>) => {\r\n      const [instance, index, name] = payload\r\n      state.names[instance][index].last = name\r\n    },\r\n    addStateClick: (state) => {\r\n      state.stateClicks++\r\n    },\r\n    addClicks: (state, { payload }: PayloadAction<[number, number]>) => {\r\n      const [instance, clicks] = payload\r\n      state.clicks[instance] += clicks\r\n    },\r\n    addClicksWithAdd: (state, { payload }: PayloadAction<[number]>) => {\r\n      const [instance] = payload\r\n      state.clicks[instance] += state.addClicks\r\n    },\r\n    setAddClicks: (state, { payload }: PayloadAction<[number]>) => {\r\n      const [clicks] = payload\r\n      state.addClicks += clicks\r\n    },\r\n  },\r\n})\r\n\r\nconst unboxParameters = <T extends unknown[]>(callback: (args: T) => void) => (...args: T) => callback(args)\r\n\r\nexport const set = unboxParameters(slice.actions.set)\r\nexport const setFirstName = unboxParameters(slice.actions.setFirstName)\r\nexport const setLastName = unboxParameters(slice.actions.setLastName)\r\nexport const addClicks = unboxParameters(slice.actions.addClicks)\r\nexport const addClicksWithAdd = unboxParameters(slice.actions.addClicksWithAdd)\r\nexport const setAddClicks = unboxParameters(slice.actions.setAddClicks)\r\nexport const addStateClick = slice.actions.addStateClick\r\n\r\nexport default slice.reducer\r\n","import React, { PropsWithChildren } from 'react'\r\nimport { ListItem } from 'semantic-ui-react'\r\nimport { ItemProps } from '../app/utils'\r\nimport { MemoizedTrackingInput, TrackingInput } from './TrackingInput'\r\nimport { useCallback } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { setFirstName, setLastName } from '../app/reducer'\r\n\r\nexport const MemoizedNameInputs = ({ item, instance, children }: PropsWithChildren<ItemProps>) => {\r\n  const { first, last, index } = item\r\n  const { handleFirstChange, handleLastChange } = useUpdate(instance, index)\r\n\r\n  return (\r\n    <ListItem>\r\n      <MemoizedTrackingInput value={first} onChange={handleFirstChange} />\r\n      <MemoizedTrackingInput value={last} onChange={handleLastChange} />\r\n      {children}\r\n    </ListItem>\r\n  )\r\n}\r\n\r\nexport const NameInputs = ({ item, instance, children }: PropsWithChildren<ItemProps>) => {\r\n  const { first, last, index } = item\r\n  const { handleFirstChange, handleLastChange } = useUpdate(instance, index)\r\n\r\n  return (\r\n    <ListItem>\r\n      <TrackingInput value={first} onChange={handleFirstChange} />\r\n      <TrackingInput value={last} onChange={handleLastChange} />\r\n      {children}\r\n    </ListItem>\r\n  )\r\n}\r\n\r\nexport const useUpdate = (instance: number, index: number) => {\r\n  const dispatch = useDispatch()\r\n  const handleFirstChange = useCallback(\r\n    (first: string) => {\r\n      dispatch(setFirstName(instance, index, first))\r\n    },\r\n    [dispatch, instance, index]\r\n  )\r\n  const handleLastChange = useCallback(\r\n    (last: string) => {\r\n      dispatch(setLastName(instance, index, last))\r\n    },\r\n    [dispatch, instance, index]\r\n  )\r\n  return { handleFirstChange, handleLastChange }\r\n}\r\n","import React, { memo } from 'react'\r\nimport { Divider, Header, ItemProps, ListItem } from 'semantic-ui-react'\r\nimport { TrackingInput } from '../components/TrackingInput'\r\nimport DataList from '../components/DataList'\r\nimport { NameInputs, MemoizedNameInputs, useUpdate } from '../components/NameInputs'\r\nimport { Item } from '../app/utils'\r\n\r\nconst component = 'ExampleProps_'\r\n\r\nconst ExampleRendering = () => {\r\n  return (\r\n    <>\r\n      <Header>Components render when parent renders. This can be prevented with memo.</Header>\r\n      <DataList name={`${component}NameInputs`} header='Everything renders on change.' Component={NameInputs} />\r\n      <DataList\r\n        name={`${component}MemoizedNameInputs`}\r\n        header='With memo, only the changed input renders.'\r\n        Component={MemoizedNameInputs}\r\n      />\r\n      <Divider />\r\n      <Header>\r\n        Components also render when props change. This is important when using references (objects, arrays, functions).\r\n      </Header>\r\n      <DataList\r\n        name={`${component}WithMemoizedItem`}\r\n        header='When props are delivered as an object, the whole row renders.'\r\n        Component={WithMemoizedItem}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nconst WithMemoizedItem = ({ item, instance }: ItemProps) => {\r\n  const { index } = item\r\n  const { handleFirstChange, handleLastChange } = useUpdate(instance, index)\r\n\r\n  return (\r\n    <ListItem>\r\n      <MemoizedRenderFirstName item={item} onChange={handleFirstChange} />\r\n      <MemoizedRenderLastName item={item} onChange={handleLastChange} />\r\n    </ListItem>\r\n  )\r\n}\r\n\r\nconst MemoizedRenderFirstName = memo(({ item, onChange }: { item: Item; onChange: (value: string) => void }) => (\r\n  <TrackingInput value={item.first} onChange={onChange} />\r\n))\r\n\r\nconst MemoizedRenderLastName = memo(({ item, onChange }: { item: Item; onChange: (value: string) => void }) => (\r\n  <TrackingInput value={item.last} onChange={onChange} />\r\n))\r\n\r\nexport default ExampleRendering\r\n","import React, { memo } from 'react'\r\nimport { Header, ListItem } from 'semantic-ui-react'\r\nimport { TrackingInput } from '../components/TrackingInput'\r\nimport { useData, useAllData, useName, useFirstName, useLastName } from '../app/selectors'\r\nimport DataList from '../components/DataList'\r\nimport { useUpdate } from '../components/NameInputs'\r\nimport { ItemProps } from '../app/utils'\r\n\r\nconst component = 'ExampleSelectors_'\r\n\r\nconst ExampleSelectors = () => {\r\n  return (\r\n    <>\r\n      <Header>useSelector forces a render if the returned value changes.</Header>\r\n      <Header>So universal hooks will cause unnecessary renders even when the component data doesn't change.</Header>\r\n      <DataList\r\n        name={`${component}WithAllData`}\r\n        header='Uses data from all instances. Renders even when other components change.'\r\n        Component={WithAllData}\r\n      />\r\n      <DataList\r\n        name={`${component}WithData`}\r\n        header='Uses all data from own instance. All inputs render.'\r\n        Component={WithData}\r\n      />\r\n      <DataList\r\n        name={`${component}WithName`}\r\n        header='Uses the whole name object. The whole row renders.'\r\n        Component={WithName}\r\n      />\r\n      <DataList\r\n        name={`${component}WithAttribute`}\r\n        header='Uses only the needed attribute. Only the changed value renders.'\r\n        Component={WithAttribute}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nconst WithAllData = ({ item, instance }: ItemProps) => {\r\n  const { index } = item\r\n  const { handleFirstChange, handleLastChange } = useUpdate(instance, index)\r\n\r\n  return (\r\n    <ListItem>\r\n      <RenderFirstNameWithAllData instance={instance} index={index} onChange={handleFirstChange} />\r\n      <RenderLastNameWithAllData instance={instance} index={index} onChange={handleLastChange} />\r\n    </ListItem>\r\n  )\r\n}\r\n\r\nconst RenderFirstNameWithAllData = memo(({ instance, index, onChange }: InputProps) => {\r\n  const value = useAllData()[instance][index].first\r\n  return <TrackingInput value={value} onChange={onChange} />\r\n})\r\n\r\nconst RenderLastNameWithAllData = memo(({ instance, index, onChange }: InputProps) => {\r\n  const value = useAllData()[instance][index].last\r\n  return <TrackingInput value={value} onChange={onChange} />\r\n})\r\n\r\nconst WithData = ({ item, instance }: ItemProps) => {\r\n  const { index } = item\r\n  const { handleFirstChange, handleLastChange } = useUpdate(instance, index)\r\n\r\n  return (\r\n    <ListItem>\r\n      <RenderFirstNameWithData instance={instance} index={index} onChange={handleFirstChange} />\r\n      <RenderLastNameWithData instance={instance} index={index} onChange={handleLastChange} />\r\n    </ListItem>\r\n  )\r\n}\r\n\r\nconst RenderFirstNameWithData = memo(({ instance, index, onChange }: InputProps) => {\r\n  const value = useData(instance)[index].first\r\n  return <TrackingInput value={value} onChange={onChange} />\r\n})\r\n\r\nconst RenderLastNameWithData = memo(({ instance, index, onChange }: InputProps) => {\r\n  const value = useData(instance)[index].last\r\n  return <TrackingInput value={value} onChange={onChange} />\r\n})\r\n\r\nconst WithName = ({ item, instance }: ItemProps) => {\r\n  const { index } = item\r\n  const { handleFirstChange, handleLastChange } = useUpdate(instance, index)\r\n\r\n  return (\r\n    <ListItem>\r\n      <RenderFirstNameWithName instance={instance} index={index} onChange={handleFirstChange} />\r\n      <RenderLastNameWithName instance={instance} index={index} onChange={handleLastChange} />\r\n    </ListItem>\r\n  )\r\n}\r\n\r\nconst RenderFirstNameWithName = memo(({ instance, index, onChange }: InputProps) => {\r\n  const value = useName(instance, index).first\r\n  return <TrackingInput value={value} onChange={onChange} />\r\n})\r\n\r\nconst RenderLastNameWithName = memo(({ instance, index, onChange }: InputProps) => {\r\n  const value = useName(instance, index).last\r\n  return <TrackingInput value={value} onChange={onChange} />\r\n})\r\n\r\nconst WithAttribute = ({ item, instance }: ItemProps) => {\r\n  const { index } = item\r\n  const { handleFirstChange, handleLastChange } = useUpdate(instance, index)\r\n\r\n  return (\r\n    <ListItem>\r\n      <RenderFirstNameWithAttribute instance={instance} index={index} onChange={handleFirstChange} />\r\n      <RenderLastNameWithAttribute instance={instance} index={index} onChange={handleLastChange} />\r\n    </ListItem>\r\n  )\r\n}\r\n\r\nconst RenderFirstNameWithAttribute = memo(({ instance, index, onChange }: InputProps) => {\r\n  const value = useFirstName(instance, index)\r\n  return <TrackingInput value={value} onChange={onChange} />\r\n})\r\n\r\nconst RenderLastNameWithAttribute = memo(({ instance, index, onChange }: InputProps) => {\r\n  const value = useLastName(instance, index)\r\n  return <TrackingInput value={value} onChange={onChange} />\r\n})\r\n\r\ninterface InputProps {\r\n  instance: number\r\n  index: number\r\n  onChange: (value: string) => void\r\n}\r\n\r\nexport default ExampleSelectors\r\n","// Selector hooks with reselect to return data from Redux.\r\nimport { createSelector } from '@reduxjs/toolkit'\r\nimport { useMemo } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { RootState } from './store'\r\nimport { doExpensiveCalculation } from './utils'\r\n\r\nconst getName = (state: RootState, instance: number, index: number) => state.names[instance][index]\r\n\r\nconst getInstance = (_state: RootState, path: [number, number]) => path[0]\r\nconst getFirstNameWithProps = (state: RootState, path: [number, number]) => getName(state, path[0], path[1]).first\r\nconst getLastNameWithProps = (state: RootState, path: [number, number]) => getName(state, path[0], path[1]).last\r\nconst createFullNameCounterSelector = () =>\r\n  createSelector(\r\n    getInstance,\r\n    getFirstNameWithProps,\r\n    getLastNameWithProps,\r\n    (instance, first, last) => `${first} ${last} ${doExpensiveCalculation(instance)}`\r\n  )\r\nconst fullNameCounterSelector = createFullNameCounterSelector()\r\n\r\nexport const useFullNameCounter = (instance: number, index: number) => {\r\n  return useSelector((state: RootState) => {\r\n    const { first, last } = getName(state, instance, index)\r\n    return `${first} ${last} ${doExpensiveCalculation(instance)}`\r\n  })\r\n}\r\n\r\nexport const useFullNameCounterWithReselect = (instance: number, index: number) =>\r\n  useSelector((state: RootState) => fullNameCounterSelector(state, [instance, index]))\r\n\r\nexport const useFullNameCounterWithFixedReselect = (instance: number, index: number) => {\r\n  const selector = useMemo(() => createFullNameCounterSelector(), [])\r\n  return useSelector((state: RootState) => selector(state, [instance, index]))\r\n}\r\nconst createFullNameSelector = () =>\r\n  createSelector(getFirstNameWithProps, getLastNameWithProps, (first, last) => ({ first, last }))\r\n\r\nexport const useFullNameWithReselect = (instance: number, index: number) => {\r\n  const selector = useMemo(() => createFullNameSelector(), [])\r\n  return useSelector((state: RootState) => selector(state, [instance, index]))\r\n}\r\n","// Inputs to show a full name.\r\nimport React, { memo } from 'react'\r\nimport { TrackingInput } from './TrackingInput'\r\n\r\nexport const FullNameString = ({ name }: { name: string }) => <TrackingInput value={name} />\r\n\r\nexport const MemoizedFullNameString = memo(FullNameString)\r\n\r\nexport const MemoizedFullNameObject = memo(({ name }: { name: { first: string; last: string } }) => (\r\n  <FullNameString name={`${name.first} ${name.last}`} />\r\n))\r\n\r\ninterface Props {\r\n  instance: number\r\n  index: number\r\n  selector: (instance: number, index: number) => { first: string; last: string }\r\n}\r\n\r\nexport const FullNameRedux = ({ instance, index, selector }: Props) => {\r\n  const name = selector(instance, index)\r\n\r\n  return <MemoizedFullNameObject name={name} />\r\n}\r\n\r\nexport const MemoizedFullNameRedux = memo(FullNameRedux)\r\n","import React, { memo } from 'react'\r\nimport { Header } from 'semantic-ui-react'\r\nimport {\r\n  useFullNameCounter,\r\n  useFullNameCounterWithReselect,\r\n  useFullNameCounterWithFixedReselect,\r\n} from '../app/reselect'\r\nimport {} from '../app/selectors'\r\nimport { ItemProps } from '../app/utils'\r\nimport DataList from '../components/DataList'\r\nimport { FullNameString } from '../components/FullName'\r\nimport { MemoizedNameInputs } from '../components/NameInputs'\r\n\r\nconst component = 'ExampleReselect_'\r\n\r\nconst ExampleReselect = () => {\r\n  return (\r\n    <>\r\n      <Header>reselect library allows memoization based on input instead of output values.</Header>\r\n      <Header>This can be used to avoid expensive calculations and reusing complex selector logic.</Header>\r\n      <DataList\r\n        name={`${component}FromRedux`}\r\n        header='Without reselect, the full name is recalculated every time.'\r\n        Component={FromRedux}\r\n      />\r\n      <DataList\r\n        name={`${component}FromReselect`}\r\n        header=\"Default implementation of reselect doesn't work for lists (cachesize of 1).\"\r\n        Component={FromReselect}\r\n      />\r\n      <DataList\r\n        name={`${component}FromFixedReselect`}\r\n        header='This can be fixed by creating selector instance for every item.'\r\n        Component={FromFixedReselect}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nconst FromRedux = memo(({ item, instance }: ItemProps) => {\r\n  const { index } = item\r\n  const name = useFullNameCounter(instance, index)\r\n  return (\r\n    <MemoizedNameInputs item={item} instance={instance}>\r\n      <FullNameString name={name} />\r\n    </MemoizedNameInputs>\r\n  )\r\n})\r\n\r\nconst FromReselect = memo(({ item, instance }: ItemProps) => {\r\n  const { index } = item\r\n  const name = useFullNameCounterWithReselect(instance, index)\r\n  return (\r\n    <MemoizedNameInputs item={item} instance={instance}>\r\n      <FullNameString name={name} />\r\n    </MemoizedNameInputs>\r\n  )\r\n})\r\n\r\nconst FromFixedReselect = memo(({ item, instance }: ItemProps) => {\r\n  const { index } = item\r\n  const name = useFullNameCounterWithFixedReselect(instance, index)\r\n  return (\r\n    <MemoizedNameInputs item={item} instance={instance}>\r\n      <FullNameString name={name} />\r\n    </MemoizedNameInputs>\r\n  )\r\n})\r\n\r\nexport default ExampleReselect\r\n","import React, { useMemo } from 'react'\r\nimport { Divider, Header } from 'semantic-ui-react'\r\nimport DataList from '../components/DataList'\r\nimport { ItemProps } from '../app/utils'\r\nimport { MemoizedNameInputs } from '../components/NameInputs'\r\nimport {\r\n  MemoizedFullNameObject,\r\n  MemoizedFullNameRedux,\r\n  FullNameRedux,\r\n  MemoizedFullNameString,\r\n  FullNameString,\r\n} from '../components/FullName'\r\nimport { useFullName, useFullNameWithShallow } from '../app/selectors'\r\nimport { useFullNameWithReselect } from '../app/reselect'\r\n\r\nconst component = 'ExampleValues_'\r\n\r\nconst ExampleValues = () => {\r\n  return (\r\n    <>\r\n      <Header>\r\n        useMemo can be used to keep object references same. This prevents extra renders for <u>memoized</u> components.\r\n      </Header>\r\n      <DataList\r\n        name={`${component}FromObject`}\r\n        header='Full name field gets props as an object. This object is created every render with a different reference.'\r\n        Component={FromObject}\r\n      />\r\n      <DataList\r\n        name={`${component}FromObjectWithMemo`}\r\n        header='With useMemo, only the changed name renders.'\r\n        Component={FromObjectWithMemo}\r\n      />\r\n      <Divider />\r\n      <Header>useMemo is pointless for plain values like strings (except if the calculation is expensive).</Header>\r\n      <DataList\r\n        name={`${component}FromString`}\r\n        header='Full name field gets props as an string, only the changed name renders.'\r\n        Component={FromString}\r\n      />\r\n      <DataList\r\n        name={`${component}FromStringWithouMemoization`}\r\n        header=\"Without memoization, useMemo is still pointless because it doesn't prevent renders.\"\r\n        Component={FromStringWithoutMemoization}\r\n      />\r\n      <Divider />\r\n      <Header>Redux can also be used but requires a proper implementation.</Header>\r\n      <DataList\r\n        name={`${component}FromRedux`}\r\n        header='The original issue exists with the default implementation.'\r\n        Component={FromRedux}\r\n      />\r\n      <DataList\r\n        name={`${component}FromReduxShallow`}\r\n        header='useSelector supports memoization to prevent unnecessary renders.'\r\n        Component={FromReduxShallow}\r\n      />\r\n      <DataList\r\n        name={`${component}FromReduxShallowWithoutMemo`}\r\n        header='useSelector has a bit surpising feature that the memoization is forgotten when the parent causes the render.'\r\n        Component={FromReduxShallowWithoutMemo}\r\n      />\r\n      <DataList\r\n        name={`${component}FromReselect`}\r\n        header='This works better with reselect library.'\r\n        Component={FromReselect}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nconst FromObject = ({ item, instance }: ItemProps) => {\r\n  const { first, last } = item\r\n  const name = { first, last }\r\n  return (\r\n    <MemoizedNameInputs item={item} instance={instance}>\r\n      <MemoizedFullNameObject name={name} />\r\n    </MemoizedNameInputs>\r\n  )\r\n}\r\n\r\nconst FromObjectWithMemo = ({ item, instance }: ItemProps) => {\r\n  const { first, last } = item\r\n  const name = useMemo(() => ({ first, last }), [first, last])\r\n  return (\r\n    <MemoizedNameInputs item={item} instance={instance}>\r\n      <MemoizedFullNameObject name={name} />\r\n    </MemoizedNameInputs>\r\n  )\r\n}\r\n\r\nconst FromString = ({ item, instance }: ItemProps) => {\r\n  const { first, last } = item\r\n\r\n  return (\r\n    <MemoizedNameInputs item={item} instance={instance}>\r\n      <MemoizedFullNameString name={`${first} ${last}`} />\r\n    </MemoizedNameInputs>\r\n  )\r\n}\r\n\r\nconst FromStringWithoutMemoization = ({ item, instance }: ItemProps) => {\r\n  const { first, last } = item\r\n  const name = useMemo(() => `${first} ${last}`, [first, last])\r\n  return (\r\n    <MemoizedNameInputs item={item} instance={instance}>\r\n      <FullNameString name={name} />\r\n    </MemoizedNameInputs>\r\n  )\r\n}\r\n\r\nconst FromRedux = ({ item, instance }: ItemProps) => {\r\n  const { index } = item\r\n  return (\r\n    <MemoizedNameInputs item={item} instance={instance}>\r\n      <MemoizedFullNameRedux instance={instance} index={index} selector={useFullName} />\r\n    </MemoizedNameInputs>\r\n  )\r\n}\r\n\r\nconst FromReduxShallow = ({ item, instance }: ItemProps) => {\r\n  const { index } = item\r\n  return (\r\n    <MemoizedNameInputs item={item} instance={instance}>\r\n      <MemoizedFullNameRedux instance={instance} index={index} selector={useFullNameWithShallow} />\r\n    </MemoizedNameInputs>\r\n  )\r\n}\r\n\r\nconst FromReduxShallowWithoutMemo = ({ item, instance }: ItemProps) => {\r\n  const { index } = item\r\n  return (\r\n    <MemoizedNameInputs item={item} instance={instance}>\r\n      <FullNameRedux instance={instance} index={index} selector={useFullNameWithShallow} />\r\n    </MemoizedNameInputs>\r\n  )\r\n}\r\n\r\nconst FromReselect = ({ item, instance }: ItemProps) => {\r\n  const { index } = item\r\n  return (\r\n    <MemoizedNameInputs item={item} instance={instance}>\r\n      <FullNameRedux instance={instance} index={index} selector={useFullNameWithReselect} />\r\n    </MemoizedNameInputs>\r\n  )\r\n}\r\n\r\nexport default ExampleValues\r\n","import React, { memo, PropsWithChildren, useEffect, useRef } from 'react'\r\nimport { Button } from 'semantic-ui-react'\r\nimport { getNextColor } from '../app/utils'\r\n\r\ntype ButtonProps = PropsWithChildren<{ onClick?: () => void }>\r\n\r\n/**\r\n * A button that tracks rendering with background color.\r\n */\r\nexport const TrackingButton = ({ children, onClick }: ButtonProps) => {\r\n  const ref = useRef('')\r\n  useEffect(() => {\r\n    ref.current = getNextColor(ref.current)\r\n  })\r\n  return (\r\n    <Button\r\n      onClick={onClick}\r\n      disabled={!onClick}\r\n      style={{ backgroundColor: ref.current, padding: 5, border: 'solid 2px black', width: 40, height: 40 }}\r\n      circular\r\n    >\r\n      {children}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport const MemoizedTrackingButton = memo(TrackingButton)\r\n","import React, { useCallback, useReducer, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Divider, Header } from 'semantic-ui-react'\r\n\r\nimport { addStateClick } from '../app/reducer'\r\nimport { RootState } from '../app/store'\r\nimport { TrackingButton } from '../components/TrackingButton'\r\n\r\nconst ExampleState = () => {\r\n  return (\r\n    <>\r\n      <Header>\r\n        Clicking a button increases an internal counter which is not used at all. This value is stored in different\r\n        ways.\r\n      </Header>\r\n      <Header>Renders still happen because some hooks force a render (useState, useSelector).</Header>\r\n      <Counter\r\n        header='The value is stored in local state (useState). Every click causes a render.'\r\n        hook={useWithState}\r\n      />\r\n      <Counter header=\"The value is stored in a local ref (useRef). Clicks won't cause renders\" hook={useWithRef} />\r\n      <Counter\r\n        header=\"The value is stored in local state (useState) but mutated. Clicks won't cause renders\"\r\n        hook={useWithMutableState}\r\n      />\r\n      <Counter header=\"The value is stored in Redux store. Clicks won't cause renders.\" hook={useWithDispatch} />\r\n      <Counter\r\n        header='But if useSelector is used to get the value then every click causes a render.'\r\n        hook={useWithRedux}\r\n      />\r\n      <Counter\r\n        header='The value is stored in local reducer state (useReducer). Every click causes a render.'\r\n        hook={useWithReducer}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\ninterface Props {\r\n  hook: () => () => void\r\n  header: string\r\n}\r\n\r\nconst Counter = ({ hook, header }: Props) => {\r\n  const handleClick = hook()\r\n  return (\r\n    <>\r\n      <Divider />\r\n      <Header size='small'>{header}</Header>\r\n      <TrackingButton onClick={handleClick}>+</TrackingButton>\r\n    </>\r\n  )\r\n}\r\n\r\n/**\r\n * Amount of clicks is stored in state but the value is not used.\r\n * All updates still cause a render.\r\n */\r\nconst useWithState = () => {\r\n  const [, setState] = useState(0)\r\n\r\n  const handleClick = useCallback(() => {\r\n    setState((prev) => prev + 1)\r\n  }, [])\r\n\r\n  return handleClick\r\n}\r\n\r\n/**\r\n * Amount of clicks is stored in Redux.\r\n * The value is not accessed so updates won't cause a render.\r\n */\r\nconst useWithDispatch = () => {\r\n  const dispatch = useDispatch()\r\n\r\n  const handleClick = useCallback(() => {\r\n    dispatch(addStateClick())\r\n  }, [dispatch])\r\n\r\n  return handleClick\r\n}\r\n\r\n/**\r\n * Amount of clicks is stored in Redux. The value is accessed but not used.\r\n * All updates still cause a render.\r\n */\r\nconst useWithRedux = () => {\r\n  useSelector((state: RootState) => state.stateClicks)\r\n  const dispatch = useDispatch()\r\n\r\n  const handleClick = useCallback(() => {\r\n    dispatch(addStateClick())\r\n  }, [dispatch])\r\n\r\n  return handleClick\r\n}\r\n\r\n/**\r\n * Amount of clicks is stored in a mutable ref.\r\n * Updates won't cause a render.\r\n */\r\nconst useWithRef = () => {\r\n  const click = useRef(0)\r\n\r\n  const handleClick = useCallback(() => {\r\n    click.current++\r\n  }, [])\r\n\r\n  return handleClick\r\n}\r\n\r\n/**\r\n * Amount of clicks is stored in a local state. The value is mutated instead of updated.\r\n * Updates won't cause a render.\r\n */\r\nconst useWithMutableState = () => {\r\n  const [state] = useState({ value: 0 })\r\n\r\n  const handleClick = useCallback(() => {\r\n    state.value++\r\n  }, [state])\r\n\r\n  return handleClick\r\n}\r\n\r\nconst counterReducer = (state: number, type: string) => {\r\n  switch (type) {\r\n    case 'add':\r\n      return state + 1\r\n    default:\r\n      throw new Error()\r\n  }\r\n}\r\n\r\n/**\r\n * Amount of clicks is stored in a local reducer state but the value is not used.\r\n * All updates still cause a render.\r\n */\r\nconst useWithReducer = () => {\r\n  const [, dispatch] = useReducer(counterReducer, 0)\r\n\r\n  const handleClick = useCallback(() => {\r\n    dispatch('add')\r\n  }, [dispatch])\r\n\r\n  return handleClick\r\n}\r\n\r\nexport default ExampleState\r\n","import React, { Dispatch, memo, useContext } from 'react'\r\nimport { Divider, Header } from 'semantic-ui-react'\r\nimport { useClicks } from '../app/selectors'\r\nimport { getInstanceNumber } from '../app/utils'\r\nimport { NumericInput } from './Input'\r\nimport { MemoizedTrackingButton, TrackingButton } from './TrackingButton'\r\n\r\ninterface SharedProps {\r\n  header: string\r\n  name: string\r\n}\r\n\r\ninterface Props extends SharedProps {\r\n  hook: (instance: number) => { clicks: number; setClicks: (value: number) => void; handleClick: () => void }\r\n  memoized?: boolean\r\n}\r\n\r\nconst Adder = ({ hook, name, header, memoized }: Props) => {\r\n  const instance = getInstanceNumber(name)\r\n  const { clicks, setClicks, handleClick } = hook(instance)\r\n  const ButtonComponent = memoized ? MemoizedTrackingButton : TrackingButton\r\n  const totalClicks = useClicks(instance)\r\n  return (\r\n    <>\r\n      <Divider />\r\n      <Header size='small'>{header}</Header>\r\n      <NumericInput value={clicks} onChange={setClicks} />\r\n      <ButtonComponent onClick={handleClick}>Add</ButtonComponent>\r\n      <NumericInput value={totalClicks} />\r\n    </>\r\n  )\r\n}\r\n\r\ntype DispatchType = Dispatch<{ type: string; value: number }>\r\n\r\nconst AdderDispatch = React.createContext((null as unknown) as DispatchType)\r\n\r\ninterface DispatchProps extends SharedProps {\r\n  hook: (instance: number) => { clicks: number; dispatch: DispatchType }\r\n}\r\nexport const AdderWithDispatch = ({ header, name, hook }: DispatchProps) => {\r\n  const instance = getInstanceNumber(name)\r\n  const { clicks, dispatch } = hook(instance)\r\n  const totalClicks = useClicks(instance)\r\n  return (\r\n    <>\r\n      <Divider />\r\n      <Header size='small'>{header}</Header>\r\n      <AdderDispatch.Provider value={dispatch}>\r\n        <NumericInputWithDispatch value={clicks} />\r\n        <AdderButtonWithDispatch />\r\n      </AdderDispatch.Provider>\r\n\r\n      <NumericInput value={totalClicks} />\r\n    </>\r\n  )\r\n}\r\n\r\nconst NumericInputWithDispatch = ({ value }: { value: number }) => {\r\n  const dispatch = useContext(AdderDispatch)\r\n  const handleChange = (value: number) => {\r\n    dispatch({ type: 'set', value })\r\n  }\r\n  return <NumericInput value={value} onChange={handleChange} />\r\n}\r\nconst AdderButtonWithDispatch = memo(() => {\r\n  const dispatch = useContext(AdderDispatch)\r\n  const handleClick = () => {\r\n    dispatch({ type: 'add', value: 0 })\r\n  }\r\n\r\n  return <TrackingButton onClick={handleClick}>Add</TrackingButton>\r\n})\r\n\r\nexport default Adder\r\n","import React, { useCallback, useEffect, useReducer, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Divider, Header } from 'semantic-ui-react'\r\nimport { addClicks, addClicksWithAdd, setAddClicks } from '../app/reducer'\r\nimport { RootState } from '../app/store'\r\nimport Adder, { AdderWithDispatch } from '../components/Adder'\r\n\r\nconst component = 'ExampleHandlers_'\r\n\r\nconst ExampleHandlers = () => {\r\n  return (\r\n    <>\r\n      <Header>Following example has a button that sets value to a counter.</Header>\r\n      <Header>\r\n        useCallback can be used to keep function references same. This prevents extra renders for <u>memoized</u>{' '}\r\n        components.\r\n      </Header>\r\n      <Adder\r\n        name={`${component}useWithoutUsecallback`}\r\n        header='Without useCallback, changing the value and clicking the button invalidate the handler reference.'\r\n        hook={useWithoutUsecallback}\r\n        memoized\r\n      />\r\n      <Adder\r\n        name={`${component}useWithUseCallback`}\r\n        header='Without memoization of the component, useCallback has no effect.'\r\n        hook={useWithUseCallback}\r\n      />\r\n      <Adder\r\n        name={`${component}useWithUseCallback`}\r\n        header='With memoization and useCallback, changing the value still invalidates the reference because of dependency.'\r\n        hook={useWithUseCallback}\r\n        memoized\r\n      />\r\n      <Divider />\r\n      <Header>There are multiple ways to break this dependency.</Header>\r\n      <Adder\r\n        name={`${component}useWithUpdater`}\r\n        header=\"The state updater function allows getting the state value without a dependency. However updater functions shouldn't have side effects so dispatching requires a bit more code.\"\r\n        hook={useWithUpdater}\r\n        memoized\r\n      />\r\n      <Adder\r\n        name={`${component}useWithRef`}\r\n        header=\"The state value can be copied to a mutable ref which doesn't require a dependency.\"\r\n        hook={useWithRef}\r\n        memoized\r\n      />\r\n      <Adder\r\n        name={`${component}useWithCallbackRef`}\r\n        header='Another way is to put the whole callback to a mutable ref.'\r\n        hook={useWithCallbackRef}\r\n        memoized\r\n      />\r\n      <Divider />\r\n      <Header>\r\n        Reducers allow separating the logic of setting and adding the value. This further removes the need of passing\r\n        the handler as a prop.\r\n      </Header>\r\n      <Adder\r\n        name={`${component}useWithRedux`}\r\n        header='The state value is stored in Redux.'\r\n        hook={useWithRedux}\r\n        memoized\r\n      />\r\n      <Adder\r\n        name={`${component}useWithReducer`}\r\n        header='The state value is stored with useReducer.'\r\n        hook={useWithReducer}\r\n        memoized\r\n      />\r\n      <AdderWithDispatch\r\n        name={`${component}useWithReducerNoProps`}\r\n        header='The state value is stored with useReducer. The dispatch is passed down in a context, replacing the handler.'\r\n        hook={useWithReducerNoProps}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nconst useWithoutUsecallback = (instance: number) => {\r\n  const [clicks, setClicks] = useState(0)\r\n  const dispatch = useDispatch()\r\n\r\n  const handleClick = () => {\r\n    dispatch(addClicks(instance, clicks))\r\n  }\r\n\r\n  return { clicks, setClicks, handleClick }\r\n}\r\n\r\nconst useWithUseCallback = (instance: number) => {\r\n  const [clicks, setClicks] = useState(0)\r\n  const dispatch = useDispatch()\r\n\r\n  const handleClick = useCallback(() => {\r\n    dispatch(addClicks(instance, clicks))\r\n  }, [dispatch, instance, clicks])\r\n\r\n  return { clicks, setClicks, handleClick }\r\n}\r\n\r\nconst useWithUpdater = (instance: number) => {\r\n  const [clicks, setClicks] = useState(0)\r\n  const dispatch = useDispatch()\r\n\r\n  const handleClick = useCallback(() => {\r\n    let value = 0\r\n    // Updater function shouldn't have side effects so Redux dispatch must be outside of it.\r\n    setClicks((prev) => {\r\n      value = prev\r\n      return prev\r\n    })\r\n    dispatch(addClicks(instance, value))\r\n  }, [dispatch, instance])\r\n\r\n  return { clicks, setClicks, handleClick }\r\n}\r\n\r\nconst useWithRef = (instance: number) => {\r\n  const [clicks, setClicks] = useState(0)\r\n  const dispatch = useDispatch()\r\n\r\n  // Break the dependency bu copying to state to a mutable ref.\r\n  const clicksRef = useRef(clicks)\r\n  useEffect(() => {\r\n    clicksRef.current = clicks\r\n  }, [clicks])\r\n\r\n  const handleClick = useCallback(() => {\r\n    dispatch(addClicks(instance, clicksRef.current))\r\n  }, [dispatch, instance])\r\n\r\n  return { clicks, setClicks, handleClick }\r\n}\r\n\r\nconst useWithCallbackRef = (instance: number) => {\r\n  const [clicks, setClicks] = useState(0)\r\n  const dispatch = useDispatch()\r\n\r\n  // Break the dependency bu copying to state to a mutable ref.\r\n  const callbackRef = useRef(() => {})\r\n  useEffect(() => {\r\n    callbackRef.current = () => {\r\n      dispatch(addClicks(instance, clicks))\r\n    }\r\n  }, [dispatch, instance, clicks])\r\n\r\n  const handleClick = useCallback(() => {\r\n    callbackRef.current()\r\n  }, [])\r\n\r\n  return { clicks, setClicks, handleClick }\r\n}\r\n\r\nconst useWithRedux = (instance: number) => {\r\n  const dispatch = useDispatch()\r\n  const setClicks = useCallback(\r\n    (value: number) => {\r\n      dispatch(setAddClicks(value))\r\n    },\r\n    [dispatch]\r\n  )\r\n  const clicks = useSelector((state: RootState) => state.addClicks)\r\n\r\n  const handleClick = useCallback(() => {\r\n    dispatch(addClicksWithAdd(instance))\r\n  }, [dispatch, instance])\r\n\r\n  return { clicks, setClicks, handleClick }\r\n}\r\n\r\nconst adderReducer = (state: { value: number; add: boolean }, action: { type: string; value: number }) => {\r\n  switch (action.type) {\r\n    case 'set':\r\n      return { ...state, value: action.value }\r\n    case 'add':\r\n      return { ...state, add: true }\r\n    case 'added':\r\n      return { ...state, add: false }\r\n    default:\r\n      throw new Error()\r\n  }\r\n}\r\n\r\nconst useWithReducer = (instance: number) => {\r\n  const [state, reducerDispatch] = useReducer(adderReducer, { value: 0, add: false })\r\n  const dispatch = useDispatch()\r\n  // Reducer function shouldn't have side effects so Redux dispatch must be outside of it.\r\n  useEffect(() => {\r\n    if (state.add) {\r\n      dispatch(addClicks(instance, state.value))\r\n      reducerDispatch({ type: 'added', value: 0 })\r\n    }\r\n  }, [state.value, state.add, instance, dispatch])\r\n\r\n  const handleClick = useCallback(() => {\r\n    reducerDispatch({ type: 'add', value: 0 })\r\n  }, [reducerDispatch])\r\n\r\n  const setClicks = useCallback(\r\n    (value: number) => {\r\n      reducerDispatch({ type: 'set', value })\r\n    },\r\n    [reducerDispatch]\r\n  )\r\n\r\n  return { clicks: state.value, setClicks, handleClick }\r\n}\r\n\r\nconst useWithReducerNoProps = (instance: number) => {\r\n  const [state, reducerDispatch] = useReducer(adderReducer, { value: 0, add: false })\r\n  const dispatch = useDispatch()\r\n  // Reducer function shouldn't have side effects so Redux dispatch must be outside of it.\r\n  useEffect(() => {\r\n    if (state.add) {\r\n      dispatch(addClicks(instance, state.value))\r\n      reducerDispatch({ type: 'added', value: 0 })\r\n    }\r\n  }, [state.value, state.add, instance, dispatch])\r\n\r\n  return { dispatch: reducerDispatch, clicks: state.value }\r\n}\r\n\r\nexport default ExampleHandlers\r\n","import React from 'react'\r\nimport { Container, Tab } from 'semantic-ui-react'\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport ExampleRendering from './pages/ExampleRendering'\r\nimport ExampleSelectors from './pages/ExampleSelectors'\r\nimport ExampleReselect from './pages/ExampleReselect'\r\nimport ExampleValues from './pages/ExampleValues'\r\nimport ExampleState from './pages/ExampleState'\r\nimport ExampleHandlers from './pages/ExampleHandlers'\r\n\r\nfunction App() {\r\n  const panes = [\r\n    {\r\n      menuItem: 'Rendering',\r\n      render: () => (\r\n        <Tab.Pane>\r\n          <ExampleRendering />\r\n        </Tab.Pane>\r\n      ),\r\n    },\r\n    {\r\n      menuItem: 'State',\r\n      render: () => (\r\n        <Tab.Pane>\r\n          <ExampleState />\r\n        </Tab.Pane>\r\n      ),\r\n    },\r\n    {\r\n      menuItem: 'Selectors',\r\n      render: () => (\r\n        <Tab.Pane>\r\n          <ExampleSelectors />\r\n        </Tab.Pane>\r\n      ),\r\n    },\r\n    {\r\n      menuItem: 'Handlers',\r\n      render: () => (\r\n        <Tab.Pane>\r\n          <ExampleHandlers />\r\n        </Tab.Pane>\r\n      ),\r\n    },\r\n    {\r\n      menuItem: 'Values',\r\n      render: () => (\r\n        <Tab.Pane>\r\n          <ExampleValues />\r\n        </Tab.Pane>\r\n      ),\r\n    },\r\n    {\r\n      menuItem: 'Reselect',\r\n      render: () => (\r\n        <Tab.Pane>\r\n          <ExampleReselect />\r\n        </Tab.Pane>\r\n      ),\r\n    },\r\n  ]\r\n\r\n  return (\r\n    <Container>\r\n      <Tab panes={panes} />\r\n      <Brrrrrrrrrrrrrr />\r\n    </Container>\r\n  )\r\n}\r\n\r\nconst Brrrrrrrrrrrrrr = () => (\r\n  <>\r\n    <br />\r\n    <br />\r\n    <br />\r\n    <br />\r\n    <br />\r\n    <br />\r\n    <br />\r\n    <br />\r\n    <br />\r\n    <br />\r\n    <br />\r\n    <br />\r\n    <br />\r\n    <br />\r\n  </>\r\n)\r\n\r\nexport default App\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\r\nimport reducer from './reducer'\r\n\r\nexport const store = configureStore({\r\n  reducer,\r\n  devTools: { trace: true, traceLimit: 20 },\r\n})\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, Action<string>>\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport { store } from './app/store'\r\nimport { Provider } from 'react-redux'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}